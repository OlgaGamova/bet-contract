/**
 * This file is autogenerated by Scaffold-ETH.
 * You should not edit it manually or your changes might be overwritten.
 */
import { GenericContractsDeclaration } from "~~/utils/scaffold-eth/contract";

const deployedContracts = {
  31337: {
    YourContract: {
      address: "0x5FbDB2315678afecb367f032d93F642f64180aa3",
      abi: [
        {
          inputs: [
            {
              internalType: "address",
              name: "_priceFeed",
              type: "address",
            },
          ],
          stateMutability: "nonpayable",
          type: "constructor",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "player",
              type: "address",
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "amount",
              type: "uint256",
            },
            {
              indexed: false,
              internalType: "int256",
              name: "predictedRate",
              type: "int256",
            },
          ],
          name: "BetPlaced",
          type: "event",
        },
        {
          anonymous: false,
          inputs: [],
          name: "BetsCleared",
          type: "event",
        },
        {
          anonymous: false,
          inputs: [],
          name: "BetsRefunded",
          type: "event",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "winner",
              type: "address",
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "amount",
              type: "uint256",
            },
          ],
          name: "WinnerDeclared",
          type: "event",
        },
        {
          inputs: [],
          name: "bet1",
          outputs: [
            {
              internalType: "address",
              name: "player",
              type: "address",
            },
            {
              internalType: "uint256",
              name: "amount",
              type: "uint256",
            },
            {
              internalType: "int256",
              name: "predictedRate",
              type: "int256",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [],
          name: "bet2",
          outputs: [
            {
              internalType: "address",
              name: "player",
              type: "address",
            },
            {
              internalType: "uint256",
              name: "amount",
              type: "uint256",
            },
            {
              internalType: "int256",
              name: "predictedRate",
              type: "int256",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [],
          name: "bettingDeadline",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [],
          name: "getContractState",
          outputs: [
            {
              internalType: "address",
              name: "player1",
              type: "address",
            },
            {
              internalType: "uint256",
              name: "amount1",
              type: "uint256",
            },
            {
              internalType: "int256",
              name: "predictedRate1",
              type: "int256",
            },
            {
              internalType: "address",
              name: "player2",
              type: "address",
            },
            {
              internalType: "uint256",
              name: "amount2",
              type: "uint256",
            },
            {
              internalType: "int256",
              name: "predictedRate2",
              type: "int256",
            },
            {
              internalType: "uint256",
              name: "currentBettingDeadline",
              type: "uint256",
            },
            {
              internalType: "uint256",
              name: "currentResultTime",
              type: "uint256",
            },
            {
              internalType: "bool",
              name: "isBet1Active",
              type: "bool",
            },
            {
              internalType: "bool",
              name: "isBet2Active",
              type: "bool",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [],
          name: "isBet1Placed",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [],
          name: "isBet2Placed",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "int256",
              name: "predictedRate",
              type: "int256",
            },
          ],
          name: "placeBet",
          outputs: [],
          stateMutability: "payable",
          type: "function",
        },
        {
          inputs: [],
          name: "resultTime",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [],
          name: "settleBet",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
      ],
      inheritedFunctions: {},
    },
  },
} as const;

export default deployedContracts satisfies GenericContractsDeclaration;
